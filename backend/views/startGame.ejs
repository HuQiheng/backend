<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Chat Room</title>
  <script src="https://cdn.socket.io/socket.io-3.0.1.min.js"></script>
</head>
<body>
  <form id="startGameForm">
    <input type="text" id="gameCode" placeholder="Enter game code">
    <button type="submit">Start Game</button>
  </form>

  <form id="nextPhaseForm">
    <input type="text" id="phaseCode" placeholder="Enter phase code">
    <button type="submit">Next Phase</button>
  </form>

  <form id="nextTurnForm">
    <button type="submit">Next Turn</button>
  </form>

  <form id="surrenderForm">
    <button type="submit">Surrender</button>
  </form>

  <form id="BuyActivesForm">
    <input type="text" id="active" placeholder="Enter active">
    <input type="text" id="territory" placeholder="Enter territory">
    <input type="number" id="troops" placeholder="Enter number">
    <button type="submit">Buy Actives</button>
  </form>

  <form id="sendMapForm">
    <button type="submit">Send Map</button>
  </form>

 <form id="leaveForm">
    <button type="submit">Leave</button>
 </form>

  <form id="AttackTerritoriesForm">
    <input type="text" id="troopsAttack" placeholder="Enter number of troops">
    <input type="text" id="origin" placeholder="Enter origin">
    <input type="text" id="destination" placeholder="Enter destination">
    <button type="submit">Attack Territories</button>
  </form>
  <form id="chatForm">
    <input type="text" id="message" placeholder="Enter message">
    <button type="submit">Send Message</button>
  </form>

  <ul id="messages"></ul>

  <script>
    const socket = io('http://localhost:3010');

    document.getElementById('startGameForm').addEventListener('submit', (e) => {
      e.preventDefault();
      const gameCode = document.getElementById('gameCode').value;
      socket.emit('startGame', gameCode);
    });

    document.getElementById('nextPhaseForm').addEventListener('submit', (e) => {
      e.preventDefault();
      const phaseCode = document.getElementById('phaseCode').value;
      socket.emit('nextPhase', phaseCode);
    });

    document.getElementById('nextTurnForm').addEventListener('submit', (e) => {
      e.preventDefault();
      socket.emit('nextTurn');
    });

    document.getElementById('surrenderForm').addEventListener('submit', (e) => {
      e.preventDefault();
      socket.emit('surrender');
    });

    document.getElementById('BuyActivesForm').addEventListener('submit', (e) => {
      e.preventDefault();
      const active = document.getElementById('active').value;
      const troops = document.getElementById('troops').value;
      const territory = document.getElementById('territory').value;

      socket.emit('buyActives', active, territory, troops );
    });

    document.getElementById('AttackTerritoriesForm').addEventListener('submit', (e) => {
      e.preventDefault();
      const troops = document.getElementById('troopsAttack').value;
      const origin = document.getElementById('origin').value;
      const destination = document.getElementById('destination').value;
      console.log("Desde " + origin + " hacia " + destination + " Con " + troops)
      socket.emit('attackTerritories', origin, destination, troops );
    });


    document.getElementById('sendMapForm').addEventListener('submit', (e) => {
      e.preventDefault();
      socket.emit('sendMap');
    });

    document.getElementById('leaveForm').addEventListener('submit', (e) => {
      e.preventDefault();
      socket.emit('leaveRoom');
    });


    socket.on('gameStarting', (room) => {
      console.log(`Game starting in room: ${room}`);
    });

    socket.on('noPlayers', (code) => {
      console.log(`No players in room with code: ${code}`);
    });

    socket.on('mapSent', (mapData) => {
  console.log(`Map data received: ${JSON.stringify(mapData)}`);
    });

    socket.on('actives Purchased', (data) => {
      console.log(`Bought ${data.troops} troops of ${data.active} in ${data.territory}`)
    });
    
    socket.on('connectedPlayers', (playersList) => {
      console.log(`Connected players: ${JSON.stringify(playersList)}`);
    });

    // New chat event listener
    document.getElementById('chatForm').addEventListener('submit', (e) => {
      e.preventDefault();
      const message = document.getElementById('message').value;
      console.log("Message from form: " + message); // Add this line for debugging
      socket.emit('sendMessage', message);
    });

    // New chatReceived event listener
    socket.on('messageReceived', (message) => {
      const messages = document.getElementById('messages');
      const li = document.createElement('li');
      li.textContent = message;
      messages.appendChild(li);
    });

    socket.on('victory', (message) => {
      console.log(message);
    });

    socket.on('gameOver', ({ message, ranking }) => {
      console.log(message);
      console.log("Ranking:", ranking);
    });

    socket.on('achievementUnlocked', (message) => {
      console.log(message);
    });
  </script>
</body>
</html>
